@page "/"
@using ConfigManager.Domain.Entities
@using ConfigManager.Domain.ValueObjects
@inject HttpClient Http
@inject IJSRuntime JS
@using System.Net
@using ConfigManager.Domain.DTOs
@using Newtonsoft.Json

<PageTitle>Configurations</PageTitle>

<h3 class="text-primary">Configuration Settings</h3>

<ApplicationSelector ApplicationNames="applicationNames" SelectedAppName="@selectedAppName"
    SelectedAppNameChanged="OnSelectedAppNameChanged" />

<SearchBox SearchQuery="@searchQuery" OnSearchChanged="OnSearchQueryChanged" />

<LoadingSpinner IsLoading="@(configurations == null)" />

<ConfigurationTable Configurations="configurations" OnEdit="OpenEditModal" OnDelete="OpenDeleteModal" />

<Pagination TotalPages="totalPages" CurrentPage="currentPage" TotalItems="totalItems" PageSize="pageSize"
    OnPageChanged="OnPageChanged" OnPageSizeChangedCallback="OnPageSizeChanged" />

<EditModal SelectedConfig="selectedConfig" OnSave="SaveChanges" OnClose="CloseEditModal" IsOpen="isEditModalOpen" />
<DeleteModal IsOpen="@isDeleteModalOpen" SelectedConfig="@selectedConfig" OnConfirm="ConfirmDelete"
    OnCancel="CloseDeleteModal" />

@code {
    private List<ConfigurationSetting> configurations = new();
    private List<string> applicationNames = new();
    private string searchQuery = string.Empty;
    private string selectedAppName = string.Empty;
    private bool isEditModalOpen = false;
    private bool isDeleteModalOpen = false;
    private ConfigurationSetting? selectedConfig;
    private CancellationTokenSource? _cts;
    private string errorMessage;
    private int totalItems = 0;

    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages = 1;

    private async Task OnPageSizeChanged(int newSize)
    {
        pageSize = newSize;
        currentPage = 1;
        await LoadConfigurations();
    }

    private async Task OnSelectedAppNameChanged(string newAppName)
    {
        selectedAppName = newAppName;
        currentPage = 1;
        await LoadConfigurations();
    }

    private async Task OnPageChanged(int newPage)
    {
        if (newPage > 0 && newPage <= totalPages)
        {
            currentPage = newPage;
            await LoadConfigurations();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadApplicationNames();
        await LoadConfigurations();
    }

    private async Task LoadApplicationNames()
    {
        try
        {
            var response = await Http.GetAsync("api/configurations/applications");
            if (response.IsSuccessStatusCode)
            {
                applicationNames = await response.Content.ReadFromJsonAsync<List<string>>() ?? new();
                if (applicationNames.Any())
                {
                    selectedAppName = applicationNames.First();
                    await LoadConfigurations();
                }
            }
            else
            {
                SetErrorMessage("Error fetching application names.", response);
            }
        }
        catch (HttpRequestException ex)
        {
            SetErrorMessage($"Error fetching application names: {ex.Message}");
        }
    }


    private async Task LoadConfigurations()
    {
        if (string.IsNullOrWhiteSpace(selectedAppName))
        {
            configurations.Clear();
            return;
        }

        try
        {
            var response = await Http.GetAsync($"api/configurations/app/page/{selectedAppName}?page={currentPage}&size={pageSize}");
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var result = JsonConvert.DeserializeObject<PagedResult<ConfigurationSetting>>(json);
                configurations = result?.Items?.ToList() ?? new List<ConfigurationSetting>();
                totalPages = result?.TotalPages ?? 1;
                totalItems = result?.TotalItems ?? 0;
            }
            else
            {
                SetErrorMessage("Error fetching configurations.", response);
            }
        }
        catch (HttpRequestException ex)
        {
            SetErrorMessage($"Error fetching configurations: {ex.Message}");
        }

        StateHasChanged();
    }

    private async Task OnSearchQueryChanged(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? string.Empty;
        _cts?.Cancel();
        _cts = new CancellationTokenSource();
        var token = _cts.Token;
        try
        {
            await Task.Delay(300, token);
            if (!token.IsCancellationRequested)
            {
                await LoadConfigurations();
            }
        }
        catch (TaskCanceledException) { }
    }

    private async Task OpenEditModal(ConfigurationSetting config)
    {
        selectedConfig = new ConfigurationSetting(config.Name, config.Type, config.Value, config.IsActive,
        config.ApplicationName, config._id);
        isEditModalOpen = true;
        await JS.InvokeVoidAsync("showModal", "editModal");
        StateHasChanged();
    }

    private async Task CloseEditModal()
    {
        isEditModalOpen = false;
        try
        {
            await JS.InvokeVoidAsync("hideModal", "editModal");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error hiding modal: {ex.Message}");
        }
        StateHasChanged();
    }

    private async Task SaveChanges(ConfigurationSetting updatedConfig)
    {
        if (updatedConfig != null)
        {
            var response = await Http.PutAsJsonAsync($"api/configurations/update/{selectedConfig._id}", updatedConfig);
            if (response.IsSuccessStatusCode)
            {
                await LoadConfigurations();
                await CloseEditModal();
            }
            else
            {
                SetErrorMessage("Error saving configuration.", response);
            }
        }
    }

    private async Task OpenDeleteModal(ConfigurationSetting config)
    {
        selectedConfig = config;
        isDeleteModalOpen = true;
        StateHasChanged();
    }

    private async Task ConfirmDelete()
    {
        if (selectedConfig != null)
        {
            var response = await Http.DeleteAsync($"api/configurations/{selectedConfig._id}");
            if (response.IsSuccessStatusCode)
            {
                configurations.Remove(selectedConfig);
                await LoadConfigurations();
            }
            else
            {
                SetErrorMessage("Error deleting configuration.", response);
            }
        }
        isDeleteModalOpen = false;
        StateHasChanged();
    }

    private void SetErrorMessage(string message, HttpResponseMessage? response = null)
    {
        errorMessage = response != null ? $"{message} ({(int)response.StatusCode} {response.ReasonPhrase})" : message;
        StateHasChanged();
    }


    private void CloseDeleteModal()
    {
        isDeleteModalOpen = false;
        StateHasChanged();
    }
}
